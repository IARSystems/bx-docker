#!/bin/bash

#
# Copyright (c) 2020-2021 IAR Systems AB
#
# aliases-set
#
# Set the IAR Build Tools Docker image aliases
#
# See LICENSE for detailed license information
#

function _bx_show_help() 
{
  echo "Usage: source ${BASH_SOURCE[0]} <package> <version>" 
  echo "  accepted packages: arm armfs rh850 rh850fs riscv rx "
  echo " "  
}

# Aliases for the arm/bin executables
function _bx-aliases-set() 
{
  if [ "${BASH_SOURCE[0]}" == "${0}" ]; then
    echo "ERROR: the script is not being properly sourced."
    _bx_show_help
    return 1
  fi
  
  if [ $# -ne 2 ]; then
    _bx_show_help
    return 1
  fi
  
  # Check for valid packages
  case ${1^^} in
    ARM) local BX_ARCH=arm;;
    ARMFS) local BX_ARCH=arm;;
    RH850) local BX_ARCH=rh850;;
    RH850FS) local BX_ARCH=rh850;;
    RISCV) local BX_ARCH=riscv;;
    RISCVFS) local BX_ARCH=riscv;;
    RX) local BX_ARCH=rx;;
    RXFS) local BX_ARCH=rx;;
    *) echo "ERROR: specified <package> parameter is not accepted -- (${1^^})."; return 1;;
  esac
  
  # Check valid semantic version
  if [[ ${2} =~ [^[:digit:].] ]]; then
    echo "ERROR: specified <version> parameter must only include numbers and a dot ( . ) as separator -- (${2})."
    return 1
  fi
  
  # Only create aliases for existing images
  declare -a BX_DOCKER_IMAGES_LIST=($(docker images iarsystems/bx${1,,} | tail -n +2 | awk '{print $1}' | cut -f2 -d/ ))
  declare -a BX_DOCKER_VERSION_LIST=($(docker images iarsystems/bx${1,,}:${2} | tail -n +2 | awk '{print $2}'))
  if [ -z ${BX_DOCKER_IMAGES_LIST} ] || [ -z ${BX_DOCKER_VERSION_LIST} ]; then
    echo "ERROR: no Docker image was found -- iarsystems/bx${1,,}:${2}."
    local CURRENT_IMAGES=$(docker images iarsystems/bx* | tail -n +2 | awk '{print $1":"$2}')
    if [[ ! -z ${CURRENT_IMAGES} ]]; then
      echo "IAR Build Tools Docker images found in this host:"
      for img in ${CURRENT_IMAGES[@]}; do
        echo ${img}
      done 
    fi
    return 1
  fi

  local BX_VERSION=${2}
  
  local CMD=$(printf "docker run --rm -v \$PWD:/build -v \$IAR_LMS_SETTINGS_DIR:/.lms iarsystems/bx${1,,}:${BX_VERSION}")
  # <arch> execs
  local IASMARCH=$(printf "alias iasm${BX_ARCH}='${CMD} iasm${BX_ARCH}'")
  eval ${IASMARCH} 
  local ICCARCH=$(printf "alias icc${BX_ARCH}='${CMD} icc${BX_ARCH}'")
  eval $ICCARCH 
  local IELFDUMPARCH=$(printf "alias ielfdump${BX_ARCH}='${CMD} ielfdump${BX_ARCH}'")
  eval $IELFDUMPARCH 
  local ILINKARCH=$(printf "alias ilink${BX_ARCH}='${CMD} ilink${BX_ARCH}'")
  eval $ILINKARCH   
  # non-<arch> execs
  local IARBUILD=$(printf "alias iarbuild='${CMD} iarbuild'")
  eval $IARBUILD 
  local IARCHIVE=$(printf "alias iarchive='${CMD} iarchive'")
  eval $IARCHIVE 
  local ICHECKS=$(printf "alias ichecks='${CMD} ichecks'")
  eval $ICHECKS 
  local ICSTAT=$(printf "alias icstat='${CMD} icstat'")
  eval $ICSTAT 
  local IELFTOOL=$(printf "alias ielftool='${CMD} ielftool'")
  eval $IELFTOOL 
  local IEXE2OBJ=$(printf "alias iexe2obj='${CMD} iexe2obj'")
  eval $IEXE2OBJ 
  local ISYMEXPORT=$(printf "alias isymexport='${CMD} isymexport'")
  eval $ISYMEXPORT 
  local IOBJMANIP=$(printf "alias iobjmanip='${CMD} iobjmanip'")
  eval $IOBJMANIP 
  local IREPORT=$(printf "alias ireport='${CMD} ireport'")
  eval $IREPORT 
  local LLM=$(printf "alias lightlicensemanager='${CMD} lightlicensemanager'")
  eval $LLM 
  local LICINFO=$(printf "alias licenseinfo='${CMD} licenseinfo'")
  eval $LICINFO 
  local BXARCH_DOCKER_INTERACTIVE=$(printf "docker run --rm -v \$PWD:/build -v \$IAR_LMS_SETTINGS_DIR:/.lms -it iarsystems/bx${1,,}-${BX_VERSION}")
  local BX_IT=$(printf "alias bx${1,,}-docker-interactive='$BXARCH_DOCKER_INTERACTIVE'")
  eval $BX_IT
  
  printf -- "-- Aliases for IAR Build Tools were set.\n"
  printf "   .. using Docker image: iarsystems/bx%s:%s.\n" ${1,,} ${BX_VERSION}
}

_bx-aliases-set $@
unset -f _bx-aliases-set
unset -f _bx_show_help

# Add Bash autocompletion for the IAR command line build utility
source "$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"/iarbuild-autocompletion.bash
